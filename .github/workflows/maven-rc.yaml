# This workflow will build a package using Maven and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#apache-maven-with-a-settings-path

name: Build and Publish Release

on:
  pull_request:
    types: [created, opened, synchronize, labeled, unlabeled]
    branches: [ "main" ]

jobs:
  build-and-deploy-rc:
    runs-on: ubuntu-latest
    
    # üîê CORRIGIDO: Permiss√µes necess√°rias
    permissions:
      contents: write        # necess√°rio para criar tags
      pull-requests: write   # necess√°rio para comentar no PR
      packages: read         # üÜï ADICIONADO: para ler packages do GitHub
      repository-projects: read  # Para acessar packages de outros repos da org

    env:
      IMAGE_NAME: maiconlanzendorf/finance-service
      GH_PACKAGES_TOKEN: ${{ secrets.GH_PACKAGES_TOKEN }}
      GITHUB_ACTOR: ${{ github.actor }}

    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}  # üÜï ADICIONADO: token para checkout

      # üîß CORRIGIDO: Dar permiss√£o de execu√ß√£o ao mvnw
      - name: Grant execute permission for mvnw
        run: chmod +x ./mvnw

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Configure Maven settings
        run: mkdir -p ~/.m2 && cp .github/maven/settings.xml ~/.m2/settings.xml

      - name: Build with Maven
        run: ./mvnw clean package
        env:
          GITHUB_ACTOR: ${{ secrets.GITHUB_ACTOR }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      #############################################
      # üöÄ S√≥ gera RC se o PR tiver a label RC
      #############################################
      - name: Generate RC Version
        id: rc_version
        if: ${{ contains(github.event.pull_request.labels.*.name, 'RC') }}
        run: |
          DATE=$(date +'%Y%m%d') 
          EXISTING_TAGS=$(git ls-remote --tags origin "refs/tags/RC.${DATE}.*" | wc -l) 
          COUNT=$(printf "%03d" $((EXISTING_TAGS + 1))) 
          RC_VERSION="RC.${DATE}.${COUNT}" 
          echo "RC Version: $RC_VERSION"
          echo "rc_version=$RC_VERSION" >> $GITHUB_OUTPUT

      - name: Login to Docker Hub
        if: ${{ contains(github.event.pull_request.labels.*.name, 'RC') }}
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      # üîß CORRIGIDO: Build com Maven usando o settings correto
      # üîç DEBUG: Verificar configura√ß√µes Maven
      - name: Debug Maven Configuration
        if: ${{ contains(github.event.pull_request.labels.*.name, 'RC') }}
        run: |
          echo "GITHUB_ACTOR: $GITHUB_ACTOR"
          echo "Settings file: $(ls -la .github/maven/settings.xml)"
          ./mvnw help:effective-settings --settings .github/maven/settings.xml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_ACTOR: ${{ github.actor }}

      - name: Build with Maven and Deploy into Docker Hub
        if: ${{ contains(github.event.pull_request.labels.*.name, 'RC') }}
        run: |
          ./mvnw spring-boot:build-image \
              -Dspring-boot.build-image.imageName=${{ env.IMAGE_NAME }}:${{ steps.rc_version.outputs.rc_version }} \
              --settings .github/maven/settings.xml \
              --file pom.xml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_ACTOR: ${{ github.actor }}

      # üîß CORRIGIDO: Build normal usando mvnw
      - name: Build with Maven
        if: ${{ !contains(github.event.pull_request.labels.*.name, 'RC') }}
        run: ./mvnw -B package --settings .github/maven/settings.xml --file pom.xml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_ACTOR: ${{ github.actor }}

      # 4Ô∏è‚É£ Faz push da imagem Docker para o Docker Hub
      - name: Push Docker Image with RC Tag
        if: ${{ contains(github.event.pull_request.labels.*.name, 'RC') }}
        run: docker push $IMAGE_NAME:${{ steps.rc_version.outputs.rc_version }}

      # 5Ô∏è‚É£ (Opcional) Cria a tag RC no GitHub
      - name: Create Git Tag
        if: ${{ contains(github.event.pull_request.labels.*.name, 'RC') }}
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com" 
          git tag ${{ steps.rc_version.outputs.rc_version }}
          git push origin ${{ steps.rc_version.outputs.rc_version }}

      # 6Ô∏è‚É£ Comenta no PR com a vers√£o RC criada
      - name: Comment RC Version on PR
        if: ${{ contains(github.event.pull_request.labels.*.name, 'RC') }}
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          message: |
            üöÄ New Release Candidate Version generated: `${{ env.IMAGE_NAME }}:${{ steps.rc_version.outputs.rc_version }}`
            üì¶ Docker image published:
            `${{ env.IMAGE_NAME }}:${{ steps.rc_version.outputs.rc_version }}`